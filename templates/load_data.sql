-- This file automatically generated by sql_bootcamp_data_construct.py
-- http://www.github.com/craigmbooth/sql_bootcamp

-- ###################################################################
-- ### The sql_bootcamp database
-- ###################################################################

DROP DATABASE IF EXISTS sql_bootcamp;
CREATE DATABASE sql_bootcamp;
USE sql_bootcamp;

-- Create the states table
CREATE TABLE states (
   abbreviation CHAR(2) NOT NULL,
   full_name VARCHAR(255) NOT NULL,
   population INT NOT NULL,
   sq_mile_water INT NOT NULL,
   sq_mile_land INT NOT NULL,
   region VARCHAR(50) NOT NULL,
   PRIMARY KEY(abbreviation)
);

-- Create the presidents table
CREATE TABLE presidents (
   id INT NOT NULL,
   last_name VARCHAR(255) NOT NULL,
   first_name VARCHAR(255) NOT NULL,
   took_office DATE NOT NULL,
   left_office DATE,
   party VARCHAR(255),
   home_state CHAR(2) NOT NULL,
   birth DATE NOT NULL,
   death DATE,
   death_place VARCHAR(255),
   FOREIGN KEY (home_state) REFERENCES states(abbreviation),
   PRIMARY KEY(id)
);

-- Create the books table
CREATE TABLE books (
   id INT NOT NULL AUTO_INCREMENT,
   title VARCHAR(255) NOT NULL,
   publisher VARCHAR(255) NOT NULL,
   published_year INT NOT NULL,
   isbn VARCHAR(32),
   author_id INT NOT NULL,
   PRIMARY KEY(id),
   FOREIGN KEY (author_id) REFERENCES presidents(id)
);

INSERT INTO states
   (abbreviation, full_name, population, sq_mile_water, sq_mile_land, region)
VALUES
   {% for state in states -%}
      {{ state }}{% if loop.last %};{% else %},{% endif %}
   {% endfor %}

INSERT INTO presidents
   (id, first_name, last_name, took_office, left_office, party, home_state, birth, death, death_place)
VALUES
   {% for president in presidents -%}
      {{ president }}{% if loop.last -%};{% else %},{% endif %}
   {% endfor %}

INSERT INTO books
   (title, publisher, published_year, isbn, author_id)
VALUES
   {% for book in books -%}
      {{ book }}{% if loop.last -%};{% else %},{% endif %}
   {% endfor %}

-- ###################################################################
-- ### The sql_bootcamp_examples database
-- ###################################################################

DROP DATABASE IF EXISTS sql_bootcamp_examples;
CREATE DATABASE sql_bootcamp_examples;
USE sql_bootcamp_examples;

------------------------------------------------------
-- Example table for aggregate function demonstrations
------------------------------------------------------

CREATE TABLE shows (
  title VARCHAR(255),
  genre VARCHAR(255),
  audience INT
);

INSERT INTO shows VALUES
  ("The Flash", "Sci-Fi", 5371295),
  ("Breaking Bad", "Drama", 12955710),
  ("Seinfeld", "Comedy", 2100199),
  ("Friends", "Comedy", 1393983),
  ("Frasier", NULL, 2000412);

------------------------------------------------------
-- Example tables for join demonstrations
------------------------------------------------------

CREATE TABLE join1 (
  id     INT,
  value  CHAR(1)
);

INSERT INTO join1 VALUES
   (1, 'a'),
   (2, 'b'),
   (3, 'c');

CREATE TABLE join2 (
  id INT,
  value CHAR(1)
);

INSERT INTO join2 VALUES
  (2, 'x'),
  (3, 'y'),
  (4, 'z');


------------------------------------------------------
-- Example tables for normalization demonstration
------------------------------------------------------

CREATE TABLE allergies_denormalized (
   child_name VARCHAR(50),
   allergies VARCHAR(100)
);

CREATE TABLE allergies_names_normalized (
   id INT NOT NULL AUTO_INCREMENT,
   name VARCHAR(50),
   PRIMARY KEY (id)
);

CREATE TABLE allergies_normalized (
   id INT AUTO_INCREMENT,
   allergy VARCHAR(50),
   child_id INT,
   PRIMARY KEY (id),
   FOREIGN KEY(child_id) REFERENCES allergies_names_normalized(id)
);

INSERT INTO allergies_denormalized VALUES
   ("Fred", "nuts, chocolate"),
   ("Mary", "penicillin"),
   ("Ed", "pollen, bee strings"),
   ("Alice", "nuts"),
   ("Bruce", NULL);


INSERT INTO allergies_names_normalized (id, name) VALUES
   (1, "Fred"),
   (2, "Mary"),
   (3, "Ed"),
   (4, "Alice"),
   (5, "Bruce");

INSERT INTO allergies_normalized (child_id, allergy) VALUES
   (1, "nuts"),
   (1, "chocolate"),
   (2, "penicillin"),
   (3, "pollen"),
   (3, "pollen"),
   (4, "nuts"),
   (5, "bee stings");

------------------------------------------------------
-- Example tables for self join demonstration
------------------------------------------------------

CREATE TABLE employees (
   id INT NOT NULL PRIMARY KEY,
   name VARCHAR(255) NOT NULL,
   title VARCHAR(255) NOT NULL,
   reports_to INT,
   FOREIGN KEY employees(reports_to) REFERENCES employees(id)
);


INSERT INTO employees VALUES
   (1, "Amanda", "CEO", NULL),
   (2, "Brian", "CTO", 1),
   (3, "Jen", "COO", 1),
   (4, "Alan", "CIO", 1),
   (5, "Rachel", "VP Engineering", 2),
   (6, "Peter", "VP Marketing", 3),
   (7, "Zach", "VP Sales", 3),
   (8, "Sandeep", "Sales Associate", 7),
   (9, "Claire", "Inside Sales Associate", 7),
   (10, "Ryan", "Software Developer", 2),
   (11, "Abel", "Security Engineer", 4),
   (12, "Mary", "Engineering Intern", 10);


------------------------------------------------------
-- Example table for pattern matching demo
------------------------------------------------------

CREATE TABLE metals (
  atomic_number INT NOT NULL PRIMARY KEY,
  symbol VARCHAR(3) NOT NULL,
  name VARCHAR(50) NOT NULL
);

INSERT INTO metals (atomic_number, symbol, name) VALUES
   (3,"Li","Lithium"), (4,"Be","Beryllium"), (11,"Na","Sodium"),
   (12,"Mg","Magnesium"), (13,"Al","Aluminum"), (19,"K","Potassium"),
   (20,"Ca","Calcium"), (21,"Sc","Scandium"), (22,"Ti","Titanium"),
   (23,"V","Vanadium"), (24,"Cr","Chromium"), (25,"Mn","Manganese"),
   (26,"Fe","Iron"), (27,"Co","Cobalt"), (28,"Ni","Nickel"),
   (29,"Cu","Copper"), (30,"Zn","Zinc"), (31,"Ga","Gallium"),
   (37,"Rb","Rubidium"), (38,"Sr","Strontium"), (39,"Y","Yttrium"),
   (40,"Zr","Zirconium"), (41,"Nb","Niobium"), (42,"Mo","Molybdenum"),
   (43,"Tc","Technetium"), (44,"Ru","Ruthenium"), (45,"Rh","Rhodium"),
   (46,"Pd","Palladium"), (47,"Ag","Silver"), (48,"Cd","Cadmium"),
   (49,"In","Indium"), (50,"Sn","Tin"), (55,"Cs","Cesium"),
   (56,"Ba","Barium"), (57,"La","Lanthanum"), (58,"Ce","Cerium"),
   (59,"Pr","Praseodymium"), (60,"Nd","Neodymium"),
   (61,"Pm","Promethium"), (62,"Sm","Samarium"), (63,"Eu","Europium"),
   (64,"Gd","Gadolinium"), (65,"Tb","Terbium"),
   (66,"Dy","Dysprosium"), (67,"Ho","Holmium"), (68,"Er","Erbium"),
   (69,"Tm","Thulium"), (70,"Yb","Ytterbium"), (71,"Lu","Lutetium"),
   (72,"Hf","Hafnium"), (73,"Ta","Tantalum"), (74,"W","Tungsten"),
   (75,"Re","Rhenium"), (76,"Os","Osmium"), (77,"Ir","Iridium"),
   (78,"Pt","Platinum"), (79,"Au","Gold"), (80,"Hg","Mercury"),
   (81,"Tl","Thallium"), (82,"Pb","Lead"), (83,"Bi","Bismuth"),
   (84,"Po","Polonium"), (87,"Fr","Francium"), (88,"Ra","Radium"),
   (89,"Ac","Actinium"), (90,"Th","Thorium"),
   (91,"Pa","Protactinium"), (92,"U","Uranium"),
   (93,"Np","Neptunium"), (94,"Pu","Plutonium"),
   (95,"Am","Americium"), (96,"Cm","Curium"), (97,"Bk","Berkelium"),
   (98,"Cf","Californium"), (99,"Es","Einsteinium"),
   (100,"Fm","Fermium"), (101,"Md","Mendelevium"),
   (102,"No","Nobelium"), (103,"Lr","Lawrencium"),
   (104,"Rf","Rutherfordium"), (105,"Db","Dubnium"),
   (106,"Sg","Seaborgium"), (107,"Bh","Bohrium"),
   (108,"Hs","Hassium"), (109,"Mt","Meitnerium"),
   (110,"Ds","Darmstadtium"), (111,"Rg","Roentgenium"),
   (112,"Cn","Copernicium"), (113,"Uut","Ununtrium"),
   (114,"Fl","Flerovium"), (115,"Uup","Ununpentium"),
   (116,"Lv","Livermorium");
